This implementation solves the food web analysis problem as specified in the assignment. Here's a breakdown of the main components:

1. load_food_web(filename): Reads the food web data from the specified file and stores it in a dictionary.

2. display_predators_and_prey(food_web): Displays the predator-prey relationships using the provided formatList function.

3. get_apex_predators(food_web): Identifies apex predators by finding animals that are not prey to any other animal.

4. get_producers(food_web): Identifies producers by finding animals that do not eat any other animal.

5. get_most_flexible_eaters(food_web): Finds the predators that eat the most different types of prey.

6. get_tastiest(food_web): Identifies the animals that are eaten by the most different predators.

7. get_heights(food_web): Calculates the height of each animal in the food web using a recursive approach.

8. main(): Handles command-line arguments, calls the other functions, and displays the results.

The program uses appropriate error handling for file operations and follows good programming practices such as using functions, avoiding global variables, and providing clear output formatting.

To run the program, save it as food_web.py and run it from the command line with the food web file as an argument, e.g.:
python food_web.py AquaticFoodWeb.txt

If no argument is provided, the program will prompt the user to enter the filename.
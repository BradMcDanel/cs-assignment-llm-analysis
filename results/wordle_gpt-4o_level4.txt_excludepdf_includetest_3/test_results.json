{
    "created": 1731003653.2461843,
    "duration": 0.04104137420654297,
    "exitcode": 1,
    "root": "/tmp/code_n45_5pbp",
    "environment": {},
    "summary": {
        "failed": 4,
        "passed": 1,
        "total": 5,
        "collected": 5
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_wordle.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py::test_valid_guess",
                    "type": "Function",
                    "lineno": 111
                },
                {
                    "nodeid": "test_wordle.py::test_invalid_guess",
                    "type": "Function",
                    "lineno": 122
                },
                {
                    "nodeid": "test_wordle.py::test_correct_color_update",
                    "type": "Function",
                    "lineno": 134
                },
                {
                    "nodeid": "test_wordle.py::test_present_and_missing_color_update",
                    "type": "Function",
                    "lineno": 143
                },
                {
                    "nodeid": "test_wordle.py::test_game_over_condition",
                    "type": "Function",
                    "lineno": 156
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_wordle.py::test_valid_guess",
            "lineno": 111,
            "outcome": "failed",
            "keywords": [
                "test_valid_guess",
                "test_wordle.py",
                "code_n45_5pbp"
            ],
            "setup": {
                "duration": 0.00019583501853048801,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00010590394958853722,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_n45_5pbp/test_wordle.py",
                    "lineno": 121,
                    "message": "assert False"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 121,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x710a7fefd840>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x710a7fddd000>\n\n    def test_valid_guess(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('apple'.upper())\n    \n        # Check for correct message\n        for msg in mock_window.messages:\n          if 'congratulations' in msg.lower():\n              return\n>       assert False\nE       assert False\n\ntest_wordle.py:121: AssertionError"
            },
            "teardown": {
                "duration": 0.00014348491095006466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_invalid_guess",
            "lineno": 122,
            "outcome": "failed",
            "keywords": [
                "test_invalid_guess",
                "test_wordle.py",
                "code_n45_5pbp"
            ],
            "setup": {
                "duration": 0.00016494281589984894,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.497907012701035e-05,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_n45_5pbp/test_wordle.py",
                    "lineno": 132,
                    "message": "assert False"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 132,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x710a7fee2620>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x710a7fddcf70>\n\n    def test_invalid_guess(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('zzzzz'.upper())\n    \n        # Check for not in word list message\n        for msg in mock_window.messages:\n          if 'not in word list' in msg.lower():\n              return\n>       assert False\nE       assert False\n\ntest_wordle.py:132: AssertionError"
            },
            "teardown": {
                "duration": 8.967379108071327e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_correct_color_update",
            "lineno": 134,
            "outcome": "passed",
            "keywords": [
                "test_correct_color_update",
                "test_wordle.py",
                "code_n45_5pbp"
            ],
            "setup": {
                "duration": 0.00012956419959664345,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.850389763712883e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 6.323703564703465e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_present_and_missing_color_update",
            "lineno": 143,
            "outcome": "failed",
            "keywords": [
                "test_present_and_missing_color_update",
                "test_wordle.py",
                "code_n45_5pbp"
            ],
            "setup": {
                "duration": 0.00011488096788525581,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00015643308870494366,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_n45_5pbp/test_wordle.py",
                    "lineno": 151,
                    "message": "AssertionError: assert '#66BB66' == '#999999'\n  - #999999\n  + #66BB66"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 151,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x710a7fe474c0>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x710a7fddf490>\n\n    def test_present_and_missing_color_update(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('ample'.upper())\n    \n        # Check colors\n        assert mock_window.get_square_color(0, 0) == CORRECT_COLOR  # 'a' is correct\n>       assert mock_window.get_square_color(0, 1) == MISSING_COLOR  # 'm' is present\nE       AssertionError: assert '#66BB66' == '#999999'\nE         - #999999\nE         + #66BB66\n\ntest_wordle.py:151: AssertionError"
            },
            "teardown": {
                "duration": 0.00012248288840055466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_game_over_condition",
            "lineno": 156,
            "outcome": "failed",
            "keywords": [
                "test_game_over_condition",
                "test_wordle.py",
                "code_n45_5pbp"
            ],
            "setup": {
                "duration": 0.0001376839354634285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00029277405701577663,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_n45_5pbp/test_wordle.py",
                    "lineno": 166,
                    "message": "assert 1 == 5\n +  where 1 = <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x710a7fd3ca60>>()\n +    where <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x710a7fd3ca60>> = <test_wordle.MockWordleGWindow object at 0x710a7fd3ca60>.get_current_row"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 166,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x710a7fd3ca60>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x710a7fddd1b0>\n\n    def test_game_over_condition(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n    \n        # Make six incorrect guesses\n        for _ in range(6):\n            mock_window.enter_listeners[0]('wrong'.upper())\n    \n    \n>       assert mock_window.get_current_row() == 5\nE       assert 1 == 5\nE        +  where 1 = <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x710a7fd3ca60>>()\nE        +    where <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x710a7fd3ca60>> = <test_wordle.MockWordleGWindow object at 0x710a7fd3ca60>.get_current_row\n\ntest_wordle.py:166: AssertionError"
            },
            "teardown": {
                "duration": 0.00011740601621568203,
                "outcome": "passed"
            }
        }
    ]
}
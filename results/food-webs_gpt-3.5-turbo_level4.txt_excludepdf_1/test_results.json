{
    "created": 1716435785.7079852,
    "duration": 1.6186869144439697,
    "exitcode": 1,
    "root": "/tmp/code_q19jeyfo",
    "environment": {},
    "summary": {
        "failed": 54,
        "total": 54,
        "collected": 54
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_Assignment4.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_Assignment4.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_Assignment4.py::test_another_predators_and_prey",
                    "type": "Function",
                    "lineno": 102
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_apex_predators",
                    "type": "Function",
                    "lineno": 107
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_producers",
                    "type": "Function",
                    "lineno": 112
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_most_flexible_eaters",
                    "type": "Function",
                    "lineno": 117
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_tastiest",
                    "type": "Function",
                    "lineno": 122
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_heights",
                    "type": "Function",
                    "lineno": 127
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_herbivores",
                    "type": "Function",
                    "lineno": 132
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_omnivores",
                    "type": "Function",
                    "lineno": 137
                },
                {
                    "nodeid": "test_Assignment4.py::test_another_carnivores",
                    "type": "Function",
                    "lineno": 142
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_predators_and_prey",
                    "type": "Function",
                    "lineno": 147
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_apex_predators",
                    "type": "Function",
                    "lineno": 152
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_producers",
                    "type": "Function",
                    "lineno": 157
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_most_flexible_eaters",
                    "type": "Function",
                    "lineno": 162
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_tastiest",
                    "type": "Function",
                    "lineno": 167
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_heights",
                    "type": "Function",
                    "lineno": 172
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_herbivores",
                    "type": "Function",
                    "lineno": 177
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_omnivores",
                    "type": "Function",
                    "lineno": 182
                },
                {
                    "nodeid": "test_Assignment4.py::test_aquatic_carnivores",
                    "type": "Function",
                    "lineno": 187
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_predators_and_prey",
                    "type": "Function",
                    "lineno": 192
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_apex_predators",
                    "type": "Function",
                    "lineno": 197
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_producers",
                    "type": "Function",
                    "lineno": 202
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_most_flexible_eaters",
                    "type": "Function",
                    "lineno": 207
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_tastiest",
                    "type": "Function",
                    "lineno": 212
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_heights",
                    "type": "Function",
                    "lineno": 217
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_herbivores",
                    "type": "Function",
                    "lineno": 222
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_omnivores",
                    "type": "Function",
                    "lineno": 227
                },
                {
                    "nodeid": "test_Assignment4.py::test_grassland_carnivores",
                    "type": "Function",
                    "lineno": 232
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_predators_and_prey",
                    "type": "Function",
                    "lineno": 237
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_apex_predators",
                    "type": "Function",
                    "lineno": 242
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_producers",
                    "type": "Function",
                    "lineno": 247
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_most_flexible_eaters",
                    "type": "Function",
                    "lineno": 252
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_tastiest",
                    "type": "Function",
                    "lineno": 257
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_heights",
                    "type": "Function",
                    "lineno": 262
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_herbivores",
                    "type": "Function",
                    "lineno": 267
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_omnivores",
                    "type": "Function",
                    "lineno": 272
                },
                {
                    "nodeid": "test_Assignment4.py::test_mixed_carnivores",
                    "type": "Function",
                    "lineno": 277
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_predators_and_prey",
                    "type": "Function",
                    "lineno": 282
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_apex_predators",
                    "type": "Function",
                    "lineno": 287
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_producers",
                    "type": "Function",
                    "lineno": 292
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_most_flexible_eaters",
                    "type": "Function",
                    "lineno": 297
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_tastiest",
                    "type": "Function",
                    "lineno": 302
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_heights",
                    "type": "Function",
                    "lineno": 307
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_herbivores",
                    "type": "Function",
                    "lineno": 312
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_omnivores",
                    "type": "Function",
                    "lineno": 317
                },
                {
                    "nodeid": "test_Assignment4.py::test_simple_carnivores",
                    "type": "Function",
                    "lineno": 322
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_predators_and_prey",
                    "type": "Function",
                    "lineno": 327
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_apex_predators",
                    "type": "Function",
                    "lineno": 332
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_producers",
                    "type": "Function",
                    "lineno": 337
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_most_flexible_eaters",
                    "type": "Function",
                    "lineno": 342
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_tastiest",
                    "type": "Function",
                    "lineno": 347
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_heights",
                    "type": "Function",
                    "lineno": 352
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_herbivores",
                    "type": "Function",
                    "lineno": 357
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_omnivores",
                    "type": "Function",
                    "lineno": 362
                },
                {
                    "nodeid": "test_Assignment4.py::test_terrestrial_carnivores",
                    "type": "Function",
                    "lineno": 367
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_Assignment4.py::test_another_predators_and_prey",
            "lineno": 102,
            "outcome": "failed",
            "keywords": [
                "test_another_predators_and_prey",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 0.00010621792171150446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012607629061676562,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 106,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 12,
                        "message": "in predators_and_prey"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_predators_and_prey():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       predators_and_prey(input_file, output_file)\n\ntest_Assignment4.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:12: in predators_and_prey\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.814502507448196e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_apex_predators",
            "lineno": 107,
            "outcome": "failed",
            "keywords": [
                "test_another_apex_predators",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.439296364784241e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012744668056257069,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 111,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 23,
                        "message": "in apex_predators"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_apex_predators():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       apex_predators(input_file, output_file)\n\ntest_Assignment4.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:23: in apex_predators\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.538803715258837e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_producers",
            "lineno": 112,
            "outcome": "failed",
            "keywords": [
                "test_another_producers",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.5342912673950195e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012375927995890379,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 116,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 33,
                        "message": "in producers"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_producers():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       producers(input_file, output_file)\n\ntest_Assignment4.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:33: in producers\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.863303810358047e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_most_flexible_eaters",
            "lineno": 117,
            "outcome": "failed",
            "keywords": [
                "test_another_most_flexible_eaters",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.793303716927767e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012572822975926101,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 121,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 43,
                        "message": "in most_flexible_eaters"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_most_flexible_eaters():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       most_flexible_eaters(input_file, output_file)\n\ntest_Assignment4.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:43: in most_flexible_eaters\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 0.00012912601232528687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_tastiest",
            "lineno": 122,
            "outcome": "failed",
            "keywords": [
                "test_another_tastiest",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.720602348446846e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012389917043037713,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 126,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 53,
                        "message": "in tastiest"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_tastiest():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       tastiest(input_file, output_file)\n\ntest_Assignment4.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:53: in tastiest\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.258196223527193e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_heights",
            "lineno": 127,
            "outcome": "failed",
            "keywords": [
                "test_another_heights",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.717606447637081e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01249569293577224,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 131,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 63,
                        "message": "in heights"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_heights():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       heights(input_file, output_file)\n\ntest_Assignment4.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:63: in heights\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.594694711267948e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_herbivores",
            "lineno": 132,
            "outcome": "failed",
            "keywords": [
                "test_another_herbivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.6680990383028984e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012376954080536962,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 136,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 74,
                        "message": "in herbivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_herbivores():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       herbivores(input_file, output_file)\n\ntest_Assignment4.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:74: in herbivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.448197670280933e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_omnivores",
            "lineno": 137,
            "outcome": "failed",
            "keywords": [
                "test_another_omnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.604606121778488e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012574772001244128,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 141,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 84,
                        "message": "in omnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_omnivores():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       omnivores(input_file, output_file)\n\ntest_Assignment4.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:84: in omnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.52970003709197e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_another_carnivores",
            "lineno": 142,
            "outcome": "failed",
            "keywords": [
                "test_another_carnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.534209776669741e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012388262082822621,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 146,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 94,
                        "message": "in carnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_another_carnivores():\n        input_file = \"AnotherFoodWeb.txt\"\n        output_file = \"AnotherFoodWeb_Output.txt\"\n>       carnivores(input_file, output_file)\n\ntest_Assignment4.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:94: in carnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AnotherFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AnotherFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AnotherFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.05629713088274e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_predators_and_prey",
            "lineno": 147,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_predators_and_prey",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.092397961765528e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012347197975032032,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 151,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 12,
                        "message": "in predators_and_prey"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_predators_and_prey():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       predators_and_prey(input_file, output_file)\n\ntest_Assignment4.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:12: in predators_and_prey\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.966797031462193e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_apex_predators",
            "lineno": 152,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_apex_predators",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.566398613154888e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012527307961136103,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 156,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 23,
                        "message": "in apex_predators"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_apex_predators():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       apex_predators(input_file, output_file)\n\ntest_Assignment4.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:23: in apex_predators\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 0.00010656705126166344,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_producers",
            "lineno": 157,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_producers",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.797401536256075e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012530725100077689,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 161,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 33,
                        "message": "in producers"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_producers():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       producers(input_file, output_file)\n\ntest_Assignment4.py:161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:33: in producers\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.349302854388952e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_most_flexible_eaters",
            "lineno": 162,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_most_flexible_eaters",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.471504457294941e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012600732035934925,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 166,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 43,
                        "message": "in most_flexible_eaters"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_most_flexible_eaters():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       most_flexible_eaters(input_file, output_file)\n\ntest_Assignment4.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:43: in most_flexible_eaters\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.77260060608387e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_tastiest",
            "lineno": 167,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_tastiest",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.813606549054384e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012533137924037874,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 171,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 53,
                        "message": "in tastiest"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_tastiest():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       tastiest(input_file, output_file)\n\ntest_Assignment4.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:53: in tastiest\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.104597847908735e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_heights",
            "lineno": 172,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_heights",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.921407137066126e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012403145083226264,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 176,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 63,
                        "message": "in heights"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_heights():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       heights(input_file, output_file)\n\ntest_Assignment4.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:63: in heights\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.910902008414268e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_herbivores",
            "lineno": 177,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_herbivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.803804378956556e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012409418006427586,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 181,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 74,
                        "message": "in herbivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_herbivores():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       herbivores(input_file, output_file)\n\ntest_Assignment4.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:74: in herbivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.1583002358675e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_omnivores",
            "lineno": 182,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_omnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.236799526959658e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012422892032191157,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 186,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 84,
                        "message": "in omnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_omnivores():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       omnivores(input_file, output_file)\n\ntest_Assignment4.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:84: in omnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 0.00010347005445510149,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_aquatic_carnivores",
            "lineno": 187,
            "outcome": "failed",
            "keywords": [
                "test_aquatic_carnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.905097350478172e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012648412026464939,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 191,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 94,
                        "message": "in carnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_aquatic_carnivores():\n        input_file = \"AquaticFoodWeb.txt\"\n        output_file = \"AquaticFoodWeb_Output.txt\"\n>       carnivores(input_file, output_file)\n\ntest_Assignment4.py:191: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:94: in carnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'AquaticFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'AquaticFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'AquaticFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.633193258196115e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_predators_and_prey",
            "lineno": 192,
            "outcome": "failed",
            "keywords": [
                "test_grassland_predators_and_prey",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.7262019254267216e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012620939989574254,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 196,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 12,
                        "message": "in predators_and_prey"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_predators_and_prey():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       predators_and_prey(input_file, output_file)\n\ntest_Assignment4.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:12: in predators_and_prey\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.768002200871706e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_apex_predators",
            "lineno": 197,
            "outcome": "failed",
            "keywords": [
                "test_grassland_apex_predators",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.639095954596996e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012448149034753442,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 201,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 23,
                        "message": "in apex_predators"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_apex_predators():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       apex_predators(input_file, output_file)\n\ntest_Assignment4.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:23: in apex_predators\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.161699563264847e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_producers",
            "lineno": 202,
            "outcome": "failed",
            "keywords": [
                "test_grassland_producers",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.757797043770552e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012336529907770455,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 206,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 33,
                        "message": "in producers"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_producers():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       producers(input_file, output_file)\n\ntest_Assignment4.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:33: in producers\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.305903222411871e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_most_flexible_eaters",
            "lineno": 207,
            "outcome": "failed",
            "keywords": [
                "test_grassland_most_flexible_eaters",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.233796011656523e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012586178025230765,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 211,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 43,
                        "message": "in most_flexible_eaters"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_most_flexible_eaters():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       most_flexible_eaters(input_file, output_file)\n\ntest_Assignment4.py:211: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:43: in most_flexible_eaters\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.406392928212881e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_tastiest",
            "lineno": 212,
            "outcome": "failed",
            "keywords": [
                "test_grassland_tastiest",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.817902274429798e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012416566023603082,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 216,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 53,
                        "message": "in tastiest"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_tastiest():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       tastiest(input_file, output_file)\n\ntest_Assignment4.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:53: in tastiest\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.064306505024433e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_heights",
            "lineno": 217,
            "outcome": "failed",
            "keywords": [
                "test_grassland_heights",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.305302329361439e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012534447945654392,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 221,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 63,
                        "message": "in heights"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_heights():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       heights(input_file, output_file)\n\ntest_Assignment4.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:63: in heights\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.172107093036175e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_herbivores",
            "lineno": 222,
            "outcome": "failed",
            "keywords": [
                "test_grassland_herbivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.59480395168066e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012478130985982716,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 226,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 74,
                        "message": "in herbivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_herbivores():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       herbivores(input_file, output_file)\n\ntest_Assignment4.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:74: in herbivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 0.00010700209531933069,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_omnivores",
            "lineno": 227,
            "outcome": "failed",
            "keywords": [
                "test_grassland_omnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.7387049309909344e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012316439067944884,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 231,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 84,
                        "message": "in omnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_omnivores():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       omnivores(input_file, output_file)\n\ntest_Assignment4.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:84: in omnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.604000322520733e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_grassland_carnivores",
            "lineno": 232,
            "outcome": "failed",
            "keywords": [
                "test_grassland_carnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.5375974625349045e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01259570603724569,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 236,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 94,
                        "message": "in carnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_grassland_carnivores():\n        input_file = \"GrasslandFoodWeb.txt\"\n        output_file = \"GrasslandFoodWeb_Output.txt\"\n>       carnivores(input_file, output_file)\n\ntest_Assignment4.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:94: in carnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'GrasslandFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'GrasslandFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'GrasslandFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.546999353915453e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_predators_and_prey",
            "lineno": 237,
            "outcome": "failed",
            "keywords": [
                "test_mixed_predators_and_prey",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.688704550266266e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012466232990846038,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 241,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 12,
                        "message": "in predators_and_prey"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_predators_and_prey():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       predators_and_prey(input_file, output_file)\n\ntest_Assignment4.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:12: in predators_and_prey\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.031093213707209e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_apex_predators",
            "lineno": 242,
            "outcome": "failed",
            "keywords": [
                "test_mixed_apex_predators",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.444802809506655e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01259706704877317,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 246,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 23,
                        "message": "in apex_predators"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_apex_predators():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       apex_predators(input_file, output_file)\n\ntest_Assignment4.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:23: in apex_predators\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.336101356893778e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_producers",
            "lineno": 247,
            "outcome": "failed",
            "keywords": [
                "test_mixed_producers",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.6730001233518124e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012369371950626373,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 251,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 33,
                        "message": "in producers"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_producers():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       producers(input_file, output_file)\n\ntest_Assignment4.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:33: in producers\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.712196722626686e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_most_flexible_eaters",
            "lineno": 252,
            "outcome": "failed",
            "keywords": [
                "test_mixed_most_flexible_eaters",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.741498898714781e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012419987004250288,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 256,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 43,
                        "message": "in most_flexible_eaters"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_most_flexible_eaters():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       most_flexible_eaters(input_file, output_file)\n\ntest_Assignment4.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:43: in most_flexible_eaters\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.890696335583925e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_tastiest",
            "lineno": 257,
            "outcome": "failed",
            "keywords": [
                "test_mixed_tastiest",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.102793850004673e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012401357060298324,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 261,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 53,
                        "message": "in tastiest"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_tastiest():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       tastiest(input_file, output_file)\n\ntest_Assignment4.py:261: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:53: in tastiest\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.593809954822063e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_heights",
            "lineno": 262,
            "outcome": "failed",
            "keywords": [
                "test_mixed_heights",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.632301326841116e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01234680402558297,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 266,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 63,
                        "message": "in heights"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_heights():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       heights(input_file, output_file)\n\ntest_Assignment4.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:63: in heights\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.406695608049631e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_herbivores",
            "lineno": 267,
            "outcome": "failed",
            "keywords": [
                "test_mixed_herbivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.554792005568743e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012446179986000061,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 271,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 74,
                        "message": "in herbivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_herbivores():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       herbivores(input_file, output_file)\n\ntest_Assignment4.py:271: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:74: in herbivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.174295701086521e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_omnivores",
            "lineno": 272,
            "outcome": "failed",
            "keywords": [
                "test_mixed_omnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.6196004152297974e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012397870072163641,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 276,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 84,
                        "message": "in omnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_omnivores():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       omnivores(input_file, output_file)\n\ntest_Assignment4.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:84: in omnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.16569260880351e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_mixed_carnivores",
            "lineno": 277,
            "outcome": "failed",
            "keywords": [
                "test_mixed_carnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.484395660459995e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012413947959430516,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 281,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 94,
                        "message": "in carnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_mixed_carnivores():\n        input_file = \"MixedFoodWeb.txt\"\n        output_file = \"MixedFoodWeb_Output.txt\"\n>       carnivores(input_file, output_file)\n\ntest_Assignment4.py:281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:94: in carnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'MixedFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'MixedFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'MixedFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.452598169445992e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_predators_and_prey",
            "lineno": 282,
            "outcome": "failed",
            "keywords": [
                "test_simple_predators_and_prey",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.7721976190805435e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012436027987860143,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 286,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 12,
                        "message": "in predators_and_prey"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_predators_and_prey():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       predators_and_prey(input_file, output_file)\n\ntest_Assignment4.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:12: in predators_and_prey\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.183597285300493e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_apex_predators",
            "lineno": 287,
            "outcome": "failed",
            "keywords": [
                "test_simple_apex_predators",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.565304309129715e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012359660933725536,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 291,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 23,
                        "message": "in apex_predators"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_apex_predators():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       apex_predators(input_file, output_file)\n\ntest_Assignment4.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:23: in apex_predators\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.243609383702278e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_producers",
            "lineno": 292,
            "outcome": "failed",
            "keywords": [
                "test_simple_producers",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.737401079386473e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012555590947158635,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 296,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 33,
                        "message": "in producers"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_producers():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       producers(input_file, output_file)\n\ntest_Assignment4.py:296: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:33: in producers\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 0.00010926206596195698,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_most_flexible_eaters",
            "lineno": 297,
            "outcome": "failed",
            "keywords": [
                "test_simple_most_flexible_eaters",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.826097913086414e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012535759015008807,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 301,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 43,
                        "message": "in most_flexible_eaters"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_most_flexible_eaters():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       most_flexible_eaters(input_file, output_file)\n\ntest_Assignment4.py:301: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:43: in most_flexible_eaters\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.281595703214407e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_tastiest",
            "lineno": 302,
            "outcome": "failed",
            "keywords": [
                "test_simple_tastiest",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.884398706257343e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012429510010406375,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 306,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 53,
                        "message": "in tastiest"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_tastiest():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       tastiest(input_file, output_file)\n\ntest_Assignment4.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:53: in tastiest\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 0.00010593805927783251,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_heights",
            "lineno": 307,
            "outcome": "failed",
            "keywords": [
                "test_simple_heights",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.629099905490875e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012423814041540027,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 311,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 63,
                        "message": "in heights"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_heights():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       heights(input_file, output_file)\n\ntest_Assignment4.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:63: in heights\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.323598351329565e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_herbivores",
            "lineno": 312,
            "outcome": "failed",
            "keywords": [
                "test_simple_herbivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.581299774348736e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012302373070269823,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 316,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 74,
                        "message": "in herbivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_herbivores():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       herbivores(input_file, output_file)\n\ntest_Assignment4.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:74: in herbivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 0.00011545198503881693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_omnivores",
            "lineno": 317,
            "outcome": "failed",
            "keywords": [
                "test_simple_omnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.7216035202145576e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012429469963535666,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 321,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 84,
                        "message": "in omnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_omnivores():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       omnivores(input_file, output_file)\n\ntest_Assignment4.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:84: in omnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.17169963940978e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_simple_carnivores",
            "lineno": 322,
            "outcome": "failed",
            "keywords": [
                "test_simple_carnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.349994171410799e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012638268992304802,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 326,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 94,
                        "message": "in carnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_simple_carnivores():\n        input_file = \"SimpleFoodWeb.txt\"\n        output_file = \"SimpleFoodWeb_Output.txt\"\n>       carnivores(input_file, output_file)\n\ntest_Assignment4.py:326: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:94: in carnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'SimpleFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'SimpleFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'SimpleFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.35019925236702e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_predators_and_prey",
            "lineno": 327,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_predators_and_prey",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.716504529118538e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012639411026611924,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 331,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 12,
                        "message": "in predators_and_prey"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_predators_and_prey():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       predators_and_prey(input_file, output_file)\n\ntest_Assignment4.py:331: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:12: in predators_and_prey\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.824498556554317e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_apex_predators",
            "lineno": 332,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_apex_predators",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.615898407995701e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012469385983422399,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 336,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 23,
                        "message": "in apex_predators"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_apex_predators():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       apex_predators(input_file, output_file)\n\ntest_Assignment4.py:336: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:23: in apex_predators\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.92049865797162e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_producers",
            "lineno": 337,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_producers",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.477305967360735e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012331272009760141,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 341,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 33,
                        "message": "in producers"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_producers():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       producers(input_file, output_file)\n\ntest_Assignment4.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:33: in producers\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.813792373985052e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_most_flexible_eaters",
            "lineno": 342,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_most_flexible_eaters",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.585502367466688e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012494446011260152,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 346,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 43,
                        "message": "in most_flexible_eaters"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_most_flexible_eaters():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       most_flexible_eaters(input_file, output_file)\n\ntest_Assignment4.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:43: in most_flexible_eaters\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.26250359043479e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_tastiest",
            "lineno": 347,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_tastiest",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.3697964176535606e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012642749934457242,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 351,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 53,
                        "message": "in tastiest"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_tastiest():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       tastiest(input_file, output_file)\n\ntest_Assignment4.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:53: in tastiest\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.272596798837185e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_heights",
            "lineno": 352,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_heights",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.484593566507101e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012381095089949667,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 356,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 63,
                        "message": "in heights"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_heights():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       heights(input_file, output_file)\n\ntest_Assignment4.py:356: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:63: in heights\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.615207090973854e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_herbivores",
            "lineno": 357,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_herbivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.813699681311846e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012370933894999325,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 361,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 74,
                        "message": "in herbivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_herbivores():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       herbivores(input_file, output_file)\n\ntest_Assignment4.py:361: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:74: in herbivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.827704004943371e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_omnivores",
            "lineno": 362,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_omnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 6.14760210737586e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012444788007996976,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 366,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 84,
                        "message": "in omnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_omnivores():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       omnivores(input_file, output_file)\n\ntest_Assignment4.py:366: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:84: in omnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 9.160093031823635e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_Assignment4.py::test_terrestrial_carnivores",
            "lineno": 367,
            "outcome": "failed",
            "keywords": [
                "test_terrestrial_carnivores",
                "test_Assignment4.py",
                "code_q19jeyfo"
            ],
            "setup": {
                "duration": 5.499599501490593e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012408012058585882,
                "outcome": "failed",
                "crash": {
                    "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                    "lineno": 526,
                    "message": "subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2."
                },
                "traceback": [
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 371,
                        "message": ""
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 94,
                        "message": "in carnivores"
                    },
                    {
                        "path": "test_Assignment4.py",
                        "lineno": 5,
                        "message": "in run_main_py"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 421,
                        "message": "in check_output"
                    },
                    {
                        "path": "/home/brad/.miniconda3/lib/python3.10/subprocess.py",
                        "lineno": 526,
                        "message": "CalledProcessError"
                    }
                ],
                "stderr": "python: can't open file '/tmp/code_q19jeyfo/main.py': [Errno 2] No such file or directory\n",
                "longrepr": "def test_terrestrial_carnivores():\n        input_file = \"TerrestrialFoodWeb.txt\"\n        output_file = \"TerrestrialFoodWeb_Output.txt\"\n>       carnivores(input_file, output_file)\n\ntest_Assignment4.py:371: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_Assignment4.py:94: in carnivores\n    main_output = run_main_py(input_file)\ntest_Assignment4.py:5: in run_main_py\n    return subprocess.check_output([\"python\", \"main.py\", input_file], universal_newlines=True)\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:421: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninput = None, capture_output = False, timeout = None, check = True\npopenargs = (['python', 'main.py', 'TerrestrialFoodWeb.txt'],)\nkwargs = {'stdout': -1, 'universal_newlines': True}\nprocess = <Popen: returncode: 2 args: ['python', 'main.py', 'TerrestrialFoodWeb.txt']>\nstdout = '', stderr = None, retcode = 2\n\n    def run(*popenargs,\n            input=None, capture_output=False, timeout=None, check=False, **kwargs):\n        \"\"\"Run command with arguments and return a CompletedProcess instance.\n    \n        The returned instance will have attributes args, returncode, stdout and\n        stderr. By default, stdout and stderr are not captured, and those attributes\n        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,\n        or pass capture_output=True to capture both.\n    \n        If check is True and the exit code was non-zero, it raises a\n        CalledProcessError. The CalledProcessError object will have the return code\n        in the returncode attribute, and output & stderr attributes if those streams\n        were captured.\n    \n        If timeout is given, and the process takes too long, a TimeoutExpired\n        exception will be raised.\n    \n        There is an optional argument \"input\", allowing you to\n        pass bytes or a string to the subprocess's stdin.  If you use this argument\n        you may not also use the Popen constructor's \"stdin\" argument, as\n        it will be used internally.\n    \n        By default, all communication is in bytes, and therefore any \"input\" should\n        be bytes, and the stdout and stderr will be bytes. If in text mode, any\n        \"input\" should be a string, and stdout and stderr will be strings decoded\n        according to locale encoding, or by \"encoding\" if set. Text mode is\n        triggered by setting any of text, encoding, errors or universal_newlines.\n    \n        The other arguments are the same as for the Popen constructor.\n        \"\"\"\n        if input is not None:\n            if kwargs.get('stdin') is not None:\n                raise ValueError('stdin and input arguments may not both be used.')\n            kwargs['stdin'] = PIPE\n    \n        if capture_output:\n            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n                raise ValueError('stdout and stderr arguments may not be used '\n                                 'with capture_output.')\n            kwargs['stdout'] = PIPE\n            kwargs['stderr'] = PIPE\n    \n        with Popen(*popenargs, **kwargs) as process:\n            try:\n                stdout, stderr = process.communicate(input, timeout=timeout)\n            except TimeoutExpired as exc:\n                process.kill()\n                if _mswindows:\n                    # Windows accumulates the output in a single blocking\n                    # read() call run on child threads, with the timeout\n                    # being done in a join() on those threads.  communicate()\n                    # _after_ kill() is required to collect that and add it\n                    # to the exception.\n                    exc.stdout, exc.stderr = process.communicate()\n                else:\n                    # POSIX _communicate already populated the output so\n                    # far into the TimeoutExpired exception.\n                    process.wait()\n                raise\n            except:  # Including KeyboardInterrupt, communicate handled that.\n                process.kill()\n                # We don't call process.wait() as .__exit__ does that for us.\n                raise\n            retcode = process.poll()\n            if check and retcode:\n>               raise CalledProcessError(retcode, process.args,\n                                         output=stdout, stderr=stderr)\nE               subprocess.CalledProcessError: Command '['python', 'main.py', 'TerrestrialFoodWeb.txt']' returned non-zero exit status 2.\n\n/home/brad/.miniconda3/lib/python3.10/subprocess.py:526: CalledProcessError"
            },
            "teardown": {
                "duration": 8.72759846970439e-05,
                "outcome": "passed"
            }
        }
    ]
}
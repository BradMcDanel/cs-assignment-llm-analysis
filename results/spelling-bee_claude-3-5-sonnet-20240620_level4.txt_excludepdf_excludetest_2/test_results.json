{
    "created": 1731002129.3264115,
    "duration": 0.265322208404541,
    "exitcode": 1,
    "root": "/tmp/code_hdfjvarp",
    "environment": {},
    "summary": {
        "error": 10,
        "total": 10,
        "collected": 10
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_SpellingBee.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py::test_puzzle_initialization",
                    "type": "Function",
                    "lineno": 47
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
                    "type": "Function",
                    "lineno": 52
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
                    "type": "Function",
                    "lineno": 57
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_action",
                    "type": "Function",
                    "lineno": 62
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_entry_valid",
                    "type": "Function",
                    "lineno": 69
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_entry_invalid",
                    "type": "Function",
                    "lineno": 77
                },
                {
                    "nodeid": "test_SpellingBee.py::test_pangram_identification",
                    "type": "Function",
                    "lineno": 84
                },
                {
                    "nodeid": "test_SpellingBee.py::test_score_calculation",
                    "type": "Function",
                    "lineno": 89
                },
                {
                    "nodeid": "test_SpellingBee.py::test_duplicate_word_entry",
                    "type": "Function",
                    "lineno": 96
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_after_user_input",
                    "type": "Function",
                    "lineno": 104
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_SpellingBee.py::test_puzzle_initialization",
            "lineno": 47,
            "outcome": "error",
            "keywords": [
                "test_puzzle_initialization",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.015595281030982733,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbe4bc10>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00011870008893311024,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
            "lineno": 52,
            "outcome": "error",
            "keywords": [
                "test_invalid_puzzle_length",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.01503775711171329,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cc5c08b0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00014883209951221943,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
            "lineno": 57,
            "outcome": "error",
            "keywords": [
                "test_invalid_puzzle_duplicates",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.013492196798324585,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbd1ba90>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00011217291466891766,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_action",
            "lineno": 62,
            "outcome": "error",
            "keywords": [
                "test_solve_action",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.015019712038338184,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbd81990>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00011775502935051918,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_entry_valid",
            "lineno": 69,
            "outcome": "error",
            "keywords": [
                "test_word_entry_valid",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.015044783940538764,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbe4b7f0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00012237601913511753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_entry_invalid",
            "lineno": 77,
            "outcome": "error",
            "keywords": [
                "test_word_entry_invalid",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.013454762054607272,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cc5c0520>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00011447491124272346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_pangram_identification",
            "lineno": 84,
            "outcome": "error",
            "keywords": [
                "test_pangram_identification",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.014059232082217932,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbe4b130>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00010994100011885166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_score_calculation",
            "lineno": 89,
            "outcome": "error",
            "keywords": [
                "test_score_calculation",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.01418712199665606,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbd3ab30>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.000146134989336133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_duplicate_word_entry",
            "lineno": 96,
            "outcome": "error",
            "keywords": [
                "test_duplicate_word_entry",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.013159504858776927,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbd18100>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00012067984789609909,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_after_user_input",
            "lineno": 104,
            "outcome": "error",
            "keywords": [
                "test_solve_after_user_input",
                "test_SpellingBee.py",
                "code_hdfjvarp"
            ],
            "setup": {
                "duration": 0.013986135134473443,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_hdfjvarp/SpellingBee.py",
                    "lineno": 58,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 58,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7734cbd380a0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        sbg = SpellingBeeGraphics()\n        dictionary = load_dictionary(DICTIONARY_FILE)\n        puzzle_letters = \"\"\n        found_words = set()\n        total_score = 0\n    \n        def puzzle_action(s):\n            nonlocal puzzle_letters\n            if is_valid_puzzle(s):\n                puzzle_letters = s.upper()\n                sbg.set_beehive_letters(puzzle_letters)\n                sbg.show_message(\"Puzzle set successfully!\", \"Green\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            words = find_valid_words(dictionary, puzzle_letters)\n            display_words(words)\n            show_summary(len(words), calculate_total_score(words))\n    \n        def word_action(s):\n            nonlocal found_words, total_score\n            word = s.lower()\n            if not puzzle_letters:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(f\"You've already found '{word}'!\", \"Orange\")\n            elif is_valid_word(word, puzzle_letters, dictionary):\n                score = calculate_word_score(word, puzzle_letters)\n                found_words.add(word)\n                total_score += score\n                sbg.add_word(f\"{word} ({score})\", \"Blue\" if is_pangram(word, puzzle_letters) else \"Black\")\n                sbg.set_field(\"Word\", \"\")\n                show_summary(len(found_words), total_score)\n            else:\n                sbg.show_message(get_invalid_word_message(word, puzzle_letters), \"Red\")\n    \n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:58: TypeError"
            },
            "teardown": {
                "duration": 0.00011624395847320557,
                "outcome": "passed"
            }
        }
    ]
}
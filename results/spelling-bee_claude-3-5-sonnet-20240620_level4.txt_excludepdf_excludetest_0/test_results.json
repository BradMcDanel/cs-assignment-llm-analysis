{
    "created": 1731002084.5742474,
    "duration": 0.0577847957611084,
    "exitcode": 1,
    "root": "/tmp/code_tdt7xoxy",
    "environment": {},
    "summary": {
        "error": 10,
        "total": 10,
        "collected": 10
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_SpellingBee.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py::test_puzzle_initialization",
                    "type": "Function",
                    "lineno": 47
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
                    "type": "Function",
                    "lineno": 52
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
                    "type": "Function",
                    "lineno": 57
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_action",
                    "type": "Function",
                    "lineno": 62
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_entry_valid",
                    "type": "Function",
                    "lineno": 69
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_entry_invalid",
                    "type": "Function",
                    "lineno": 77
                },
                {
                    "nodeid": "test_SpellingBee.py::test_pangram_identification",
                    "type": "Function",
                    "lineno": 84
                },
                {
                    "nodeid": "test_SpellingBee.py::test_score_calculation",
                    "type": "Function",
                    "lineno": 89
                },
                {
                    "nodeid": "test_SpellingBee.py::test_duplicate_word_entry",
                    "type": "Function",
                    "lineno": 96
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_after_user_input",
                    "type": "Function",
                    "lineno": 104
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_SpellingBee.py::test_puzzle_initialization",
            "lineno": 47,
            "outcome": "error",
            "keywords": [
                "test_puzzle_initialization",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00016256794333457947,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2d9d360>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 9.094784036278725e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
            "lineno": 52,
            "outcome": "error",
            "keywords": [
                "test_invalid_puzzle_length",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00012116506695747375,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e35c09a0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 7.962295785546303e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
            "lineno": 57,
            "outcome": "error",
            "keywords": [
                "test_invalid_puzzle_duplicates",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00010754005052149296,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2d82b30>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 8.325115777552128e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_action",
            "lineno": 62,
            "outcome": "error",
            "keywords": [
                "test_solve_action",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.0001163720153272152,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2dcf2e0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 9.153108112514019e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_entry_valid",
            "lineno": 69,
            "outcome": "error",
            "keywords": [
                "test_word_entry_valid",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00010962691158056259,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2d18bb0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 8.343788795173168e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_entry_invalid",
            "lineno": 77,
            "outcome": "error",
            "keywords": [
                "test_word_entry_invalid",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00011471984907984734,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e35c0bb0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 7.934612222015858e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_pangram_identification",
            "lineno": 84,
            "outcome": "error",
            "keywords": [
                "test_pangram_identification",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00011199712753295898,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2dcf5b0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 7.882388308644295e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_score_calculation",
            "lineno": 89,
            "outcome": "error",
            "keywords": [
                "test_score_calculation",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.0001123559195548296,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2ee00d0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 7.967720739543438e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_duplicate_word_entry",
            "lineno": 96,
            "outcome": "error",
            "keywords": [
                "test_duplicate_word_entry",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00010696705430746078,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2dcc850>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 7.859594188630581e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_after_user_input",
            "lineno": 104,
            "outcome": "error",
            "keywords": [
                "test_solve_after_user_input",
                "test_SpellingBee.py",
                "code_tdt7xoxy"
            ],
            "setup": {
                "duration": 0.00011414685286581516,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_tdt7xoxy/SpellingBee.py",
                    "lineno": 85,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 85,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7938e2d19780>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(letters):\n            return (len(letters) == 7 and\n                    letters.isalpha() and\n                    len(set(letters)) == 7)\n    \n        def is_valid_word(word, center, letters):\n            return (len(word) >= 4 and\n                    center in word and\n                    all(letter in letters for letter in word))\n    \n        def calculate_score(word, letters):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(letters):\n                score += 7  # Pangram bonus\n            return score\n    \n        def puzzle_action(s):\n            letters = s.upper()\n            if is_valid_puzzle(letters):\n                sbg.set_beehive_letters(letters)\n                sbg.show_message(\"\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            words = read_dictionary()\n            valid_words = []\n            total_score = 0\n            word_count = 0\n    \n            sbg.clear_word_list()\n            for word in words:\n                if is_valid_word(word, center, letters):\n                    score = calculate_score(word, letters)\n                    color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                    sbg.add_word(f\"{word} ({score})\", color)\n                    valid_words.append(word)\n                    total_score += score\n                    word_count += 1\n    \n            sbg.show_message(f\"Found {word_count} words. Total score: {total_score}\")\n    \n        def word_action(s):\n            letters = sbg.get_beehive_letters().lower()\n            center = letters[0]\n            word = s.lower()\n            words = read_dictionary()\n    \n            if word not in words:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, center, letters):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif center not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            else:\n                score = calculate_score(word, letters)\n                color = \"Blue\" if set(word) == set(letters) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                current_score = int(sbg.get_field(\"Score\") or \"0\")\n                current_words = int(sbg.get_field(\"Words\") or \"0\")\n                sbg.set_field(\"Score\", str(current_score + score))\n                sbg.set_field(\"Words\", str(current_words + 1))\n                sbg.show_message(f\"Good! Current score: {current_score + score}\")\n    \n            sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:85: TypeError"
            },
            "teardown": {
                "duration": 7.946603000164032e-05,
                "outcome": "passed"
            }
        }
    ]
}
{
    "created": 1716468088.3825667,
    "duration": 0.1277024745941162,
    "exitcode": 1,
    "root": "/tmp/code_ddgf7fqt",
    "environment": {},
    "summary": {
        "passed": 2,
        "failed": 3,
        "total": 5,
        "collected": 5
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_SpellingBee.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py::test_puzzle_action",
                    "type": "Function",
                    "lineno": 44
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
                    "type": "Function",
                    "lineno": 57
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
                    "type": "Function",
                    "lineno": 68
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_action",
                    "type": "Function",
                    "lineno": 79
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_action",
                    "type": "Function",
                    "lineno": 93
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_SpellingBee.py::test_puzzle_action",
            "lineno": 44,
            "outcome": "passed",
            "keywords": [
                "test_puzzle_action",
                "test_SpellingBee.py",
                "code_ddgf7fqt"
            ],
            "setup": {
                "duration": 0.00016447203233838081,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015208350960165262,
                "outcome": "passed",
                "stdout": "Starting test_puzzle_action\nBeehive letters: abcdefg\nMessages: [('Puzzle set successfully!', 'Green')]\n"
            },
            "teardown": {
                "duration": 9.794998914003372e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
            "lineno": 57,
            "outcome": "failed",
            "keywords": [
                "test_invalid_puzzle_length",
                "test_SpellingBee.py",
                "code_ddgf7fqt"
            ],
            "setup": {
                "duration": 0.00012247392442077398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015035765944048762,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_ddgf7fqt/test_SpellingBee.py",
                    "lineno": 67,
                    "message": "assert False\n +  where False = any(<generator object test_invalid_puzzle_length.<locals>.<genexpr> at 0x7f67d954df50>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 67,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_invalid_puzzle_length\nMessages: [('Puzzle must contain exactly seven characters.', 'Red')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x7f67d96da7d0>\n\n    def test_invalid_puzzle_length(mock_graphics):\n        print(\"Starting test_invalid_puzzle_length\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcde\")\n        sbg.field_callback(\"abcde\")\n    \n        print(\"Messages:\", sbg.messages)\n>       assert any(\"Invalid puzzle\" in msg or \"Not in the dictionary.\" in msg for msg, _ in sbg.messages)\nE       assert False\nE        +  where False = any(<generator object test_invalid_puzzle_length.<locals>.<genexpr> at 0x7f67d954df50>)\n\ntest_SpellingBee.py:67: AssertionError"
            },
            "teardown": {
                "duration": 0.00013802398461848497,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
            "lineno": 68,
            "outcome": "failed",
            "keywords": [
                "test_invalid_puzzle_duplicates",
                "test_SpellingBee.py",
                "code_ddgf7fqt"
            ],
            "setup": {
                "duration": 0.00012632505968213081,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013327625929377973,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_ddgf7fqt/test_SpellingBee.py",
                    "lineno": 78,
                    "message": "assert False\n +  where False = any(<generator object test_invalid_puzzle_duplicates.<locals>.<genexpr> at 0x7f67d8101bd0>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 78,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_invalid_puzzle_duplicates\nMessages: [('Puzzle must not contain duplicate characters.', 'Red')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x7f67d9daabc0>\n\n    def test_invalid_puzzle_duplicates(mock_graphics):\n        print(\"Starting test_invalid_puzzle_duplicates\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcdeff\")\n        sbg.field_callback(\"abcdeff\")\n    \n        print(\"Messages:\", sbg.messages)\n>       assert any(\"Invalid puzzle\" in msg or \"Not in the dictionary.\" in msg for msg, _ in sbg.messages)\nE       assert False\nE        +  where False = any(<generator object test_invalid_puzzle_duplicates.<locals>.<genexpr> at 0x7f67d8101bd0>)\n\ntest_SpellingBee.py:78: AssertionError"
            },
            "teardown": {
                "duration": 0.00011668598745018244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_action",
            "lineno": 79,
            "outcome": "passed",
            "keywords": [
                "test_solve_action",
                "test_SpellingBee.py",
                "code_ddgf7fqt"
            ],
            "setup": {
                "duration": 0.00012814404908567667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027732844930142164,
                "outcome": "passed",
                "stdout": "Starting test_solve_action\nWords: [('caged (5)', 'Black'), ('cabbage (7)', 'Black'), ('abed (1)', 'Black'), ('aged (1)', 'Black'), ('abbe (1)', 'Black'), ('gaged (5)', 'Black'), ('deaf (1)', 'Black'), ('badged (6)', 'Black'), ('gaff (1)', 'Black'), ('bead (1)', 'Black'), ('fade (1)', 'Black'), ('degage (6)', 'Black'), ('gage (1)', 'Black'), ('facade (6)', 'Black'), ('bagged (6)', 'Black'), ('gaffed (6)', 'Black'), ('gadded (6)', 'Black'), ('decaf (5)', 'Black'), ('caeca (5)', 'Black'), ('baff (1)', 'Black'), ('bacca (5)', 'Black'), ('accede (6)', 'Black'), ('fadged (6)', 'Black'), ('ceca (1)', 'Black'), ('faced (5)', 'Black'), ('added (5)', 'Black'), ('bade (1)', 'Black'), ('badge (5)', 'Black'), ('face (1)', 'Black'), ('babe (1)', 'Black'), ('baffed (6)', 'Black'), ('dead (1)', 'Black'), ('dabbed (6)', 'Black'), ('efface (6)', 'Black'), ('dagga (5)', 'Black'), ('fagged (6)', 'Black'), ('aced (1)', 'Black'), ('dace (1)', 'Black'), ('cage (1)', 'Black'), ('baaed (5)', 'Black'), ('cade (1)', 'Black'), ('acceded (7)', 'Black'), ('cadge (5)', 'Black'), ('beaded (6)', 'Black'), ('gagged (6)', 'Black'), ('gaffe (5)', 'Black'), ('cafe (1)', 'Black'), ('baccae (6)', 'Black'), ('cadged (6)', 'Black'), ('egad (1)', 'Black'), ('defaced (7)', 'Black'), ('agee (1)', 'Black'), ('baggage (7)', 'Black'), ('baba (1)', 'Black'), ('caecaeca (8)', 'Black'), ('faded (5)', 'Black'), ('decade (6)', 'Black'), ('abba (1)', 'Black'), ('cabbaged (8)', 'Black'), ('adage (5)', 'Black'), ('daff (1)', 'Black'), ('gaga (1)', 'Black'), ('gaed (1)', 'Black'), ('effaced (7)', 'Black'), ('deface (6)', 'Black'), ('caca (1)', 'Black'), ('abaca (5)', 'Black'), ('dada (1)', 'Black'), ('fadge (5)', 'Black'), ('daffed (6)', 'Black'), ('feedbag (7)', 'Black'), ('gabbed (6)', 'Black')]\nMessages: [('Puzzle set successfully!', 'Green'), ('Found 72 words with total score 286', 'Green')]\n"
            },
            "teardown": {
                "duration": 9.94059955701232e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_action",
            "lineno": 93,
            "outcome": "failed",
            "keywords": [
                "test_word_action",
                "test_SpellingBee.py",
                "code_ddgf7fqt"
            ],
            "setup": {
                "duration": 0.00013393699191510677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014888682984746993,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_ddgf7fqt/test_SpellingBee.py",
                    "lineno": 106,
                    "message": "assert False\n +  where False = any(<generator object test_word_action.<locals>.<genexpr> at 0x7f67d81021f0>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 106,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_word_action\nWords: []\nMessages: [('Puzzle set successfully!', 'Green'), ('Puzzle must contain exactly seven characters.', 'Red')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x7f67d96d8130>\n\n    def test_word_action(mock_graphics):\n        print(\"Starting test_word_action\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcdefg\")\n        sbg.field_callback(\"abcdefg\")\n        sbg.set_field(\"Word\", \"face\")\n        sbg.field_callback(\"face\")\n    \n        print(\"Words:\", sbg.words)\n        print(\"Messages:\", sbg.messages)\n>       assert any(\"face\" in word for word, _ in sbg.words)  # Check that the word \"face\" is correctly added\nE       assert False\nE        +  where False = any(<generator object test_word_action.<locals>.<genexpr> at 0x7f67d81021f0>)\n\ntest_SpellingBee.py:106: AssertionError"
            },
            "teardown": {
                "duration": 0.00014128605835139751,
                "outcome": "passed"
            }
        }
    ]
}
{
    "created": 1730996695.4374132,
    "duration": 0.02716374397277832,
    "exitcode": 1,
    "root": "/tmp/code_1ohpynme",
    "environment": {},
    "summary": {
        "passed": 6,
        "failed": 2,
        "total": 8,
        "collected": 8
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_enigma.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_enigma.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_enigma.py::test_enigma_initialization",
                    "type": "Function",
                    "lineno": 6
                },
                {
                    "nodeid": "test_enigma.py::test_key_press_and_release",
                    "type": "Function",
                    "lineno": 11
                },
                {
                    "nodeid": "test_enigma.py::test_rotor_advance",
                    "type": "Function",
                    "lineno": 20
                },
                {
                    "nodeid": "test_enigma.py::test_rotor_click",
                    "type": "Function",
                    "lineno": 29
                },
                {
                    "nodeid": "test_enigma.py::test_enigma_encryption",
                    "type": "Function",
                    "lineno": 37
                },
                {
                    "nodeid": "test_enigma.py::test_enigma_decryption",
                    "type": "Function",
                    "lineno": 48
                },
                {
                    "nodeid": "test_enigma.py::test_rotor_full_rotation",
                    "type": "Function",
                    "lineno": 70
                },
                {
                    "nodeid": "test_enigma.py::test_reflector",
                    "type": "Function",
                    "lineno": 80
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_enigma.py::test_enigma_initialization",
            "lineno": 6,
            "outcome": "passed",
            "keywords": [
                "test_enigma_initialization",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 8.301297202706337e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.969909347593784e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 4.804716445505619e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_enigma.py::test_key_press_and_release",
            "lineno": 11,
            "outcome": "failed",
            "keywords": [
                "test_key_press_and_release",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 4.666089080274105e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00014169886708259583,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_1ohpynme/test_enigma.py",
                    "lineno": 19,
                    "message": "assert 1 == 0\n +  where 1 = sum(<generator object test_key_press_and_release.<locals>.<genexpr> at 0x723d3f87db60>)"
                },
                "traceback": [
                    {
                        "path": "test_enigma.py",
                        "lineno": 19,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "def test_key_press_and_release():\n        model = EnigmaModel()\n        model.key_pressed('A')\n        assert model.is_key_down('A') == True\n        assert sum(model.is_lamp_on(letter) for letter in ALPHABET) == 1\n        model.key_released('A')\n        assert model.is_key_down('A') == False\n>       assert sum(model.is_lamp_on(letter) for letter in ALPHABET) == 0\nE       assert 1 == 0\nE        +  where 1 = sum(<generator object test_key_press_and_release.<locals>.<genexpr> at 0x723d3f87db60>)\n\ntest_enigma.py:19: AssertionError"
            },
            "teardown": {
                "duration": 6.952905096113682e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_enigma.py::test_rotor_advance",
            "lineno": 20,
            "outcome": "passed",
            "keywords": [
                "test_rotor_advance",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 5.075894296169281e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.09958840161562e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 4.0416838601231575e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_enigma.py::test_rotor_click",
            "lineno": 29,
            "outcome": "passed",
            "keywords": [
                "test_rotor_click",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 4.3533043935894966e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.17210753262043e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 3.968086093664169e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_enigma.py::test_enigma_encryption",
            "lineno": 37,
            "outcome": "passed",
            "keywords": [
                "test_enigma_encryption",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 4.502898082137108e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 8.379388600587845e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 3.982614725828171e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_enigma.py::test_enigma_decryption",
            "lineno": 48,
            "outcome": "passed",
            "keywords": [
                "test_enigma_decryption",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 4.2893923819065094e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00011168280616402626,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 3.78850381821394e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_enigma.py::test_rotor_full_rotation",
            "lineno": 70,
            "outcome": "passed",
            "keywords": [
                "test_rotor_full_rotation",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 4.093395546078682e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0001390229444950819,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 3.739306703209877e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_enigma.py::test_reflector",
            "lineno": 80,
            "outcome": "failed",
            "keywords": [
                "test_reflector",
                "test_enigma.py",
                "code_1ohpynme"
            ],
            "setup": {
                "duration": 4.153698682785034e-05,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00025988509878516197,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_1ohpynme/test_enigma.py",
                    "lineno": 91,
                    "message": "AssertionError: assert 16 == 13\n +  where 16 = len({'B', 'C', 'E', 'F', 'G', 'J', ...})\n +    where {'B', 'C', 'E', 'F', 'G', 'J', ...} = set(dict_values(['R', 'Z', 'F', 'N', 'G', 'B', 'S', 'F', 'E', 'Z', 'R', 'G', 'P', 'X', 'L', 'X', 'J', 'V', 'M', 'U', 'J', 'P', 'X', 'C', 'L', 'J']))\n +      where dict_values(['R', 'Z', 'F', 'N', 'G', 'B', 'S', 'F', 'E', 'Z', 'R', 'G', 'P', 'X', 'L', 'X', 'J', 'V', 'M', 'U', 'J', 'P', 'X', 'C', 'L', 'J']) = <built-in method values of dict object at 0x723d3f844480>()\n +        where <built-in method values of dict object at 0x723d3f844480> = {'A': 'R', 'B': 'Z', 'C': 'F', 'D': 'N', ...}.values"
                },
                "traceback": [
                    {
                        "path": "test_enigma.py",
                        "lineno": 91,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "def test_reflector():\n        model = EnigmaModel()\n        results = {}\n        for char in ALPHABET:\n            model.key_pressed(char)\n            result = next(letter for letter in ALPHABET if model.is_lamp_on(letter))\n            model.key_released(char)\n            results[char] = result\n    \n        # Check that we have 13 pairs of letters\n>       assert len(set(results.values())) == 13\nE       AssertionError: assert 16 == 13\nE        +  where 16 = len({'B', 'C', 'E', 'F', 'G', 'J', ...})\nE        +    where {'B', 'C', 'E', 'F', 'G', 'J', ...} = set(dict_values(['R', 'Z', 'F', 'N', 'G', 'B', 'S', 'F', 'E', 'Z', 'R', 'G', 'P', 'X', 'L', 'X', 'J', 'V', 'M', 'U', 'J', 'P', 'X', 'C', 'L', 'J']))\nE        +      where dict_values(['R', 'Z', 'F', 'N', 'G', 'B', 'S', 'F', 'E', 'Z', 'R', 'G', 'P', 'X', 'L', 'X', 'J', 'V', 'M', 'U', 'J', 'P', 'X', 'C', 'L', 'J']) = <built-in method values of dict object at 0x723d3f844480>()\nE        +        where <built-in method values of dict object at 0x723d3f844480> = {'A': 'R', 'B': 'Z', 'C': 'F', 'D': 'N', ...}.values\n\ntest_enigma.py:91: AssertionError"
            },
            "teardown": {
                "duration": 6.378279067575932e-05,
                "outcome": "passed"
            }
        }
    ]
}
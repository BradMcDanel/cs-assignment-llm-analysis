{
    "created": 1716434311.700814,
    "duration": 0.09187054634094238,
    "exitcode": 1,
    "root": "/tmp/code_prcb3kh7",
    "environment": {},
    "summary": {
        "passed": 2,
        "failed": 3,
        "total": 5,
        "collected": 5
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_SpellingBee.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py::test_puzzle_action",
                    "type": "Function",
                    "lineno": 44
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
                    "type": "Function",
                    "lineno": 57
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
                    "type": "Function",
                    "lineno": 68
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_action",
                    "type": "Function",
                    "lineno": 79
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_action",
                    "type": "Function",
                    "lineno": 93
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_SpellingBee.py::test_puzzle_action",
            "lineno": 44,
            "outcome": "passed",
            "keywords": [
                "test_puzzle_action",
                "test_SpellingBee.py",
                "code_prcb3kh7"
            ],
            "setup": {
                "duration": 0.00017479003872722387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011310887057334185,
                "outcome": "passed",
                "stdout": "Starting test_puzzle_action\nBeehive letters: abcdefg\nMessages: [('Word not valid or already found.', 'Red')]\n"
            },
            "teardown": {
                "duration": 0.00010009901598095894,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
            "lineno": 57,
            "outcome": "failed",
            "keywords": [
                "test_invalid_puzzle_length",
                "test_SpellingBee.py",
                "code_prcb3kh7"
            ],
            "setup": {
                "duration": 0.00012473692186176777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010603126022033393,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_prcb3kh7/test_SpellingBee.py",
                    "lineno": 67,
                    "message": "assert False\n +  where False = any(<generator object test_invalid_puzzle_length.<locals>.<genexpr> at 0x7a390f151d20>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 67,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_invalid_puzzle_length\nMessages: [('Word not valid or already found.', 'Red')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x7a390f9a2260>\n\n    def test_invalid_puzzle_length(mock_graphics):\n        print(\"Starting test_invalid_puzzle_length\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcde\")\n        sbg.field_callback(\"abcde\")\n    \n        print(\"Messages:\", sbg.messages)\n>       assert any(\"Invalid puzzle\" in msg or \"Not in the dictionary.\" in msg for msg, _ in sbg.messages)\nE       assert False\nE        +  where False = any(<generator object test_invalid_puzzle_length.<locals>.<genexpr> at 0x7a390f151d20>)\n\ntest_SpellingBee.py:67: AssertionError"
            },
            "teardown": {
                "duration": 0.00012999307364225388,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
            "lineno": 68,
            "outcome": "failed",
            "keywords": [
                "test_invalid_puzzle_duplicates",
                "test_SpellingBee.py",
                "code_prcb3kh7"
            ],
            "setup": {
                "duration": 0.0001358509762212634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0096490359865129,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_prcb3kh7/test_SpellingBee.py",
                    "lineno": 78,
                    "message": "assert False\n +  where False = any(<generator object test_invalid_puzzle_duplicates.<locals>.<genexpr> at 0x7a390dd059a0>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 78,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_invalid_puzzle_duplicates\nMessages: [('Word not valid or already found.', 'Red')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x7a390f2d88e0>\n\n    def test_invalid_puzzle_duplicates(mock_graphics):\n        print(\"Starting test_invalid_puzzle_duplicates\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcdeff\")\n        sbg.field_callback(\"abcdeff\")\n    \n        print(\"Messages:\", sbg.messages)\n>       assert any(\"Invalid puzzle\" in msg or \"Not in the dictionary.\" in msg for msg, _ in sbg.messages)\nE       assert False\nE        +  where False = any(<generator object test_invalid_puzzle_duplicates.<locals>.<genexpr> at 0x7a390dd059a0>)\n\ntest_SpellingBee.py:78: AssertionError"
            },
            "teardown": {
                "duration": 0.00011983804870396852,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_action",
            "lineno": 79,
            "outcome": "passed",
            "keywords": [
                "test_solve_action",
                "test_SpellingBee.py",
                "code_prcb3kh7"
            ],
            "setup": {
                "duration": 0.00012681400403380394,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0192648220108822,
                "outcome": "passed",
                "stdout": "Starting test_solve_action\nWords: [('abaca (5)', 'Black'), ('abba (4)', 'Black'), ('abbe (4)', 'Black'), ('abed (4)', 'Black'), ('accede (6)', 'Black'), ('acceded (7)', 'Black'), ('aced (4)', 'Black'), ('adage (5)', 'Black'), ('added (5)', 'Black'), ('aged (4)', 'Black'), ('agee (4)', 'Black'), ('baaed (5)', 'Black'), ('baba (4)', 'Black'), ('babe (4)', 'Black'), ('bacca (5)', 'Black'), ('baccae (6)', 'Black'), ('bade (4)', 'Black'), ('badge (5)', 'Black'), ('badged (6)', 'Black'), ('baff (4)', 'Black'), ('baffed (6)', 'Black'), ('baggage (7)', 'Black'), ('bagged (6)', 'Black'), ('bead (4)', 'Black'), ('beaded (6)', 'Black'), ('cabbage (7)', 'Black'), ('cabbaged (8)', 'Black'), ('caca (4)', 'Black'), ('cade (4)', 'Black'), ('cadge (5)', 'Black'), ('cadged (6)', 'Black'), ('caeca (5)', 'Black'), ('caecaeca (8)', 'Black'), ('cafe (4)', 'Black'), ('cage (4)', 'Black'), ('caged (5)', 'Black'), ('ceca (4)', 'Black'), ('dabbed (6)', 'Black'), ('dace (4)', 'Black'), ('dada (4)', 'Black'), ('daff (4)', 'Black'), ('daffed (6)', 'Black'), ('dagga (5)', 'Black'), ('dead (4)', 'Black'), ('deaf (4)', 'Black'), ('decade (6)', 'Black'), ('decaf (5)', 'Black'), ('deface (6)', 'Black'), ('defaced (7)', 'Black'), ('degage (6)', 'Black'), ('efface (6)', 'Black'), ('effaced (7)', 'Black'), ('egad (4)', 'Black'), ('facade (6)', 'Black'), ('face (4)', 'Black'), ('faced (5)', 'Black'), ('fade (4)', 'Black'), ('faded (5)', 'Black'), ('fadge (5)', 'Black'), ('fadged (6)', 'Black'), ('fagged (6)', 'Black'), ('feedbag (7)', 'Black'), ('gabbed (6)', 'Black'), ('gadded (6)', 'Black'), ('gaed (4)', 'Black'), ('gaff (4)', 'Black'), ('gaffe (5)', 'Black'), ('gaffed (6)', 'Black'), ('gaga (4)', 'Black'), ('gage (4)', 'Black'), ('gaged (5)', 'Black'), ('gagged (6)', 'Black')]\nMessages: [('Word not valid or already found.', 'Red'), ('Total Score: 370, Words Found: 72', 'Green')]\n"
            },
            "teardown": {
                "duration": 9.176298044621944e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_action",
            "lineno": 93,
            "outcome": "failed",
            "keywords": [
                "test_word_action",
                "test_SpellingBee.py",
                "code_prcb3kh7"
            ],
            "setup": {
                "duration": 0.00012756395153701305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01076986500993371,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_prcb3kh7/test_SpellingBee.py",
                    "lineno": 107,
                    "message": "assert False\n +  where False = any(<generator object test_word_action.<locals>.<genexpr> at 0x7a390dd05fc0>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 107,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_word_action\nWords: [('face (4)', 'Black')]\nMessages: [('Word not valid or already found.', 'Red'), ('Word accepted! Score: 4', 'Green')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x7a390f2445b0>\n\n    def test_word_action(mock_graphics):\n        print(\"Starting test_word_action\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcdefg\")\n        sbg.field_callback(\"abcdefg\")\n        sbg.set_field(\"Word\", \"face\")\n        sbg.field_callback(\"face\")\n    \n        print(\"Words:\", sbg.words)\n        print(\"Messages:\", sbg.messages)\n        assert any(\"face\" in word for word, _ in sbg.words)  # Check that the word \"face\" is correctly added\n>       assert any(\"Found\" in msg for msg, _ in sbg.messages)  # Check that the message shows the number of words and total score\nE       assert False\nE        +  where False = any(<generator object test_word_action.<locals>.<genexpr> at 0x7a390dd05fc0>)\n\ntest_SpellingBee.py:107: AssertionError"
            },
            "teardown": {
                "duration": 0.00013779697474092245,
                "outcome": "passed"
            }
        }
    ]
}
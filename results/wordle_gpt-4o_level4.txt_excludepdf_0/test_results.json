{
    "created": 1716436149.8269928,
    "duration": 0.031212329864501953,
    "exitcode": 1,
    "root": "/tmp/code_u3ndt8fp",
    "environment": {},
    "summary": {
        "passed": 2,
        "failed": 3,
        "total": 5,
        "collected": 5
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_wordle.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py::test_valid_guess",
                    "type": "Function",
                    "lineno": 111
                },
                {
                    "nodeid": "test_wordle.py::test_invalid_guess",
                    "type": "Function",
                    "lineno": 122
                },
                {
                    "nodeid": "test_wordle.py::test_correct_color_update",
                    "type": "Function",
                    "lineno": 134
                },
                {
                    "nodeid": "test_wordle.py::test_present_and_missing_color_update",
                    "type": "Function",
                    "lineno": 143
                },
                {
                    "nodeid": "test_wordle.py::test_game_over",
                    "type": "Function",
                    "lineno": 156
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_wordle.py::test_valid_guess",
            "lineno": 111,
            "outcome": "passed",
            "keywords": [
                "test_valid_guess",
                "test_wordle.py",
                "code_u3ndt8fp"
            ],
            "setup": {
                "duration": 0.00018658896442502737,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.072498556226492e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 7.15659698471427e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_invalid_guess",
            "lineno": 122,
            "outcome": "failed",
            "keywords": [
                "test_invalid_guess",
                "test_wordle.py",
                "code_u3ndt8fp"
            ],
            "setup": {
                "duration": 0.0001126640709117055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00018700200598686934,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_u3ndt8fp/test_wordle.py",
                    "lineno": 132,
                    "message": "assert False"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 132,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7d9f352f0310>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7d9f351dc940>\n\n    def test_invalid_guess(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('zzzzz'.upper())\n    \n        # Check for not in word list message\n        for msg in mock_window.messages:\n          if 'not in word list' in msg.lower():\n              return\n>       assert False\nE       assert False\n\ntest_wordle.py:132: AssertionError"
            },
            "teardown": {
                "duration": 9.121210314333439e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_correct_color_update",
            "lineno": 134,
            "outcome": "passed",
            "keywords": [
                "test_correct_color_update",
                "test_wordle.py",
                "code_u3ndt8fp"
            ],
            "setup": {
                "duration": 0.00012450595386326313,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.21109502390027e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 6.443692836910486e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_present_and_missing_color_update",
            "lineno": 143,
            "outcome": "failed",
            "keywords": [
                "test_present_and_missing_color_update",
                "test_wordle.py",
                "code_u3ndt8fp"
            ],
            "setup": {
                "duration": 0.0001111798919737339,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00014498201198875904,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_u3ndt8fp/test_wordle.py",
                    "lineno": 151,
                    "message": "AssertionError: assert '#66BB66' == '#999999'\n  - #999999\n  + #66BB66"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 151,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7d9f352ef400>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7d9f351dcca0>\n\n    def test_present_and_missing_color_update(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('ample'.upper())\n    \n        # Check colors\n        assert mock_window.get_square_color(0, 0) == CORRECT_COLOR  # 'a' is correct\n>       assert mock_window.get_square_color(0, 1) == MISSING_COLOR  # 'm' is present\nE       AssertionError: assert '#66BB66' == '#999999'\nE         - #999999\nE         + #66BB66\n\ntest_wordle.py:151: AssertionError"
            },
            "teardown": {
                "duration": 8.589797653257847e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_game_over",
            "lineno": 156,
            "outcome": "failed",
            "keywords": [
                "test_game_over",
                "test_wordle.py",
                "code_u3ndt8fp"
            ],
            "setup": {
                "duration": 0.0001265890896320343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00010210997425019741,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_u3ndt8fp/test_wordle.py",
                    "lineno": 167,
                    "message": "assert False"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 167,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7d9f352f1e10>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7d9f351dedd0>\n\n    def test_game_over(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        for _ in range(6):\n            mock_window.enter_listeners[0]('wrong'.upper())\n    \n        # Check for game over message\n        for msg in mock_window.messages:\n          if 'game over' in msg.lower():\n              return\n>       assert False\nE       assert False\n\ntest_wordle.py:167: AssertionError"
            },
            "teardown": {
                "duration": 9.316799696534872e-05,
                "outcome": "passed"
            }
        }
    ]
}
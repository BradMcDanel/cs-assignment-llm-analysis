{
    "created": 1731003802.5987897,
    "duration": 0.032886505126953125,
    "exitcode": 1,
    "root": "/tmp/code_jqzwue57",
    "environment": {},
    "summary": {
        "passed": 3,
        "failed": 2,
        "total": 5,
        "collected": 5
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_wordle.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py::test_valid_guess",
                    "type": "Function",
                    "lineno": 111
                },
                {
                    "nodeid": "test_wordle.py::test_invalid_guess",
                    "type": "Function",
                    "lineno": 122
                },
                {
                    "nodeid": "test_wordle.py::test_correct_color_update",
                    "type": "Function",
                    "lineno": 134
                },
                {
                    "nodeid": "test_wordle.py::test_present_and_missing_color_update",
                    "type": "Function",
                    "lineno": 143
                },
                {
                    "nodeid": "test_wordle.py::test_game_over_condition",
                    "type": "Function",
                    "lineno": 156
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_wordle.py::test_valid_guess",
            "lineno": 111,
            "outcome": "passed",
            "keywords": [
                "test_valid_guess",
                "test_wordle.py",
                "code_jqzwue57"
            ],
            "setup": {
                "duration": 0.00019789906218647957,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.540499791502953e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 7.461709901690483e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_invalid_guess",
            "lineno": 122,
            "outcome": "passed",
            "keywords": [
                "test_invalid_guess",
                "test_wordle.py",
                "code_jqzwue57"
            ],
            "setup": {
                "duration": 0.00012074783444404602,
                "outcome": "passed"
            },
            "call": {
                "duration": 8.486979641020298e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 6.473297253251076e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_correct_color_update",
            "lineno": 134,
            "outcome": "passed",
            "keywords": [
                "test_correct_color_update",
                "test_wordle.py",
                "code_jqzwue57"
            ],
            "setup": {
                "duration": 0.00011795805767178535,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.006588228046894e-05,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 6.278092041611671e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_present_and_missing_color_update",
            "lineno": 143,
            "outcome": "failed",
            "keywords": [
                "test_present_and_missing_color_update",
                "test_wordle.py",
                "code_jqzwue57"
            ],
            "setup": {
                "duration": 0.00011558295227587223,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.904499605298042e-05,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_jqzwue57/Wordle.py",
                    "lineno": 58,
                    "message": "NameError: name 'N_ROWS' is not defined"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 147,
                        "message": ""
                    },
                    {
                        "path": "Wordle.py",
                        "lineno": 58,
                        "message": "NameError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x75f50e4fd480>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x75f50e3d9090>\n\n    def test_present_and_missing_color_update(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n>       mock_window.enter_listeners[0]('ample'.upper())\n\ntest_wordle.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = 'AMPLE'\n\n    def enter_action(s):\n        current_row = gw.get_current_row()\n    \n        # Check if entered word is of correct length and in the dictionary\n        if len(s) != N_COLS or s.lower() not in FIVE_LETTER_WORDS:\n            gw.show_message(\"Not in word list\")\n            return\n    \n        # Determine the coloring for each letter\n        target_count = {}\n        for letter in target_word:\n            if letter in target_count:\n                target_count[letter] += 1\n            else:\n                target_count[letter] = 1\n    \n        # First pass: Check for correct positions\n        for i in range(N_COLS):\n            if s[i] == target_word[i]:\n                gw.set_square_color(current_row, i, CORRECT_COLOR)\n                target_count[s[i]] -= 1\n            else:\n                gw.set_square_color(current_row, i, MISSING_COLOR)\n    \n        # Second pass: Check for present letters\n        for i in range(N_COLS):\n            if gw.get_square_color(current_row, i) != CORRECT_COLOR:\n                if s[i] in target_count and target_count[s[i]] > 0:\n                    gw.set_square_color(current_row, i, PRESENT_COLOR)\n                    target_count[s[i]] -= 1\n    \n        # Update the keyboard colors\n        for i in range(N_COLS):\n            current_color = gw.get_key_color(s[i])\n            if gw.get_square_color(current_row, i) == CORRECT_COLOR:\n                gw.set_key_color(s[i], CORRECT_COLOR)\n            elif gw.get_square_color(current_row, i) == PRESENT_COLOR and current_color != CORRECT_COLOR:\n                gw.set_key_color(s[i], PRESENT_COLOR)\n            elif gw.get_square_color(current_row, i) == MISSING_COLOR and current_color not in [CORRECT_COLOR, PRESENT_COLOR]:\n                gw.set_key_color(s[i], MISSING_COLOR)\n    \n        # Check for win condition\n        if s == target_word:\n            gw.show_message(\"Congratulations! You've guessed the word!\")\n        else:\n>           if current_row == N_ROWS - 1:\nE           NameError: name 'N_ROWS' is not defined\n\nWordle.py:58: NameError"
            },
            "teardown": {
                "duration": 0.000135818962007761,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_game_over_condition",
            "lineno": 156,
            "outcome": "failed",
            "keywords": [
                "test_game_over_condition",
                "test_wordle.py",
                "code_jqzwue57"
            ],
            "setup": {
                "duration": 0.00015545892529189587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00011917413212358952,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_jqzwue57/Wordle.py",
                    "lineno": 58,
                    "message": "NameError: name 'N_ROWS' is not defined"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 163,
                        "message": ""
                    },
                    {
                        "path": "Wordle.py",
                        "lineno": 58,
                        "message": "NameError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x75f50e4e33d0>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x75f50e3d9360>\n\n    def test_game_over_condition(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n    \n        # Make six incorrect guesses\n        for _ in range(6):\n>           mock_window.enter_listeners[0]('wrong'.upper())\n\ntest_wordle.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = 'WRONG'\n\n    def enter_action(s):\n        current_row = gw.get_current_row()\n    \n        # Check if entered word is of correct length and in the dictionary\n        if len(s) != N_COLS or s.lower() not in FIVE_LETTER_WORDS:\n            gw.show_message(\"Not in word list\")\n            return\n    \n        # Determine the coloring for each letter\n        target_count = {}\n        for letter in target_word:\n            if letter in target_count:\n                target_count[letter] += 1\n            else:\n                target_count[letter] = 1\n    \n        # First pass: Check for correct positions\n        for i in range(N_COLS):\n            if s[i] == target_word[i]:\n                gw.set_square_color(current_row, i, CORRECT_COLOR)\n                target_count[s[i]] -= 1\n            else:\n                gw.set_square_color(current_row, i, MISSING_COLOR)\n    \n        # Second pass: Check for present letters\n        for i in range(N_COLS):\n            if gw.get_square_color(current_row, i) != CORRECT_COLOR:\n                if s[i] in target_count and target_count[s[i]] > 0:\n                    gw.set_square_color(current_row, i, PRESENT_COLOR)\n                    target_count[s[i]] -= 1\n    \n        # Update the keyboard colors\n        for i in range(N_COLS):\n            current_color = gw.get_key_color(s[i])\n            if gw.get_square_color(current_row, i) == CORRECT_COLOR:\n                gw.set_key_color(s[i], CORRECT_COLOR)\n            elif gw.get_square_color(current_row, i) == PRESENT_COLOR and current_color != CORRECT_COLOR:\n                gw.set_key_color(s[i], PRESENT_COLOR)\n            elif gw.get_square_color(current_row, i) == MISSING_COLOR and current_color not in [CORRECT_COLOR, PRESENT_COLOR]:\n                gw.set_key_color(s[i], MISSING_COLOR)\n    \n        # Check for win condition\n        if s == target_word:\n            gw.show_message(\"Congratulations! You've guessed the word!\")\n        else:\n>           if current_row == N_ROWS - 1:\nE           NameError: name 'N_ROWS' is not defined\n\nWordle.py:58: NameError"
            },
            "teardown": {
                "duration": 0.0001360168680548668,
                "outcome": "passed"
            }
        }
    ]
}
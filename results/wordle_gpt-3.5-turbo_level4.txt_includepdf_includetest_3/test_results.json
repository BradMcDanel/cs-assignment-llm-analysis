{
    "created": 1731002922.585356,
    "duration": 0.029085159301757812,
    "exitcode": 1,
    "root": "/tmp/code_3ihxgq64",
    "environment": {},
    "summary": {
        "failed": 5,
        "total": 5,
        "collected": 5
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_wordle.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_wordle.py::test_valid_guess",
                    "type": "Function",
                    "lineno": 111
                },
                {
                    "nodeid": "test_wordle.py::test_invalid_guess",
                    "type": "Function",
                    "lineno": 122
                },
                {
                    "nodeid": "test_wordle.py::test_correct_color_update",
                    "type": "Function",
                    "lineno": 134
                },
                {
                    "nodeid": "test_wordle.py::test_present_and_missing_color_update",
                    "type": "Function",
                    "lineno": 143
                },
                {
                    "nodeid": "test_wordle.py::test_game_over_condition",
                    "type": "Function",
                    "lineno": 156
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_wordle.py::test_valid_guess",
            "lineno": 111,
            "outcome": "failed",
            "keywords": [
                "test_valid_guess",
                "test_wordle.py",
                "code_3ihxgq64"
            ],
            "setup": {
                "duration": 0.00016946694813668728,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.70340333878994e-05,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_3ihxgq64/test_wordle.py",
                    "lineno": 121,
                    "message": "assert False"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 121,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7cc2df33e770>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7cc2df380ee0>\n\n    def test_valid_guess(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('apple'.upper())\n    \n        # Check for correct message\n        for msg in mock_window.messages:\n          if 'congratulations' in msg.lower():\n              return\n>       assert False\nE       assert False\n\ntest_wordle.py:121: AssertionError"
            },
            "teardown": {
                "duration": 0.00010010600090026855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_invalid_guess",
            "lineno": 122,
            "outcome": "failed",
            "keywords": [
                "test_invalid_guess",
                "test_wordle.py",
                "code_3ihxgq64"
            ],
            "setup": {
                "duration": 0.0001295038964599371,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.198401726782322e-05,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_3ihxgq64/test_wordle.py",
                    "lineno": 132,
                    "message": "assert False"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 132,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0fd0>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7cc2df380e50>\n\n    def test_invalid_guess(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('zzzzz'.upper())\n    \n        # Check for not in word list message\n        for msg in mock_window.messages:\n          if 'not in word list' in msg.lower():\n              return\n>       assert False\nE       assert False\n\ntest_wordle.py:132: AssertionError"
            },
            "teardown": {
                "duration": 9.321910329163074e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_correct_color_update",
            "lineno": 134,
            "outcome": "failed",
            "keywords": [
                "test_correct_color_update",
                "test_wordle.py",
                "code_3ihxgq64"
            ],
            "setup": {
                "duration": 0.0001273900270462036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00014546490274369717,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_3ihxgq64/test_wordle.py",
                    "lineno": 142,
                    "message": "AssertionError: assert '#999999' == '#66BB66'\n  - #66BB66\n  + #999999"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 142,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7cc2df4e51e0>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7cc2df3811b0>\n\n    def test_correct_color_update(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('apple'.upper())\n    \n        # Check if all squares are correct color\n        for i in range(5):\n>           assert mock_window.get_square_color(0, i) == CORRECT_COLOR\nE           AssertionError: assert '#999999' == '#66BB66'\nE             - #66BB66\nE             + #999999\n\ntest_wordle.py:142: AssertionError"
            },
            "teardown": {
                "duration": 8.800812065601349e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_present_and_missing_color_update",
            "lineno": 143,
            "outcome": "failed",
            "keywords": [
                "test_present_and_missing_color_update",
                "test_wordle.py",
                "code_3ihxgq64"
            ],
            "setup": {
                "duration": 0.00013400008901953697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00013211998157203197,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_3ihxgq64/test_wordle.py",
                    "lineno": 150,
                    "message": "AssertionError: assert '#999999' == '#66BB66'\n  - #66BB66\n  + #999999"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 150,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7cc2df446f80>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7cc2df383250>\n\n    def test_present_and_missing_color_update(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n        mock_window.enter_listeners[0]('ample'.upper())\n    \n        # Check colors\n>       assert mock_window.get_square_color(0, 0) == CORRECT_COLOR  # 'a' is correct\nE       AssertionError: assert '#999999' == '#66BB66'\nE         - #66BB66\nE         + #999999\n\ntest_wordle.py:150: AssertionError"
            },
            "teardown": {
                "duration": 8.777785114943981e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_wordle.py::test_game_over_condition",
            "lineno": 156,
            "outcome": "failed",
            "keywords": [
                "test_game_over_condition",
                "test_wordle.py",
                "code_3ihxgq64"
            ],
            "setup": {
                "duration": 0.00012622610665857792,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00010891910642385483,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_3ihxgq64/test_wordle.py",
                    "lineno": 166,
                    "message": "assert 0 == 5\n +  where 0 = <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0370>>()\n +    where <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0370>> = <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0370>.get_current_row"
                },
                "traceback": [
                    {
                        "path": "test_wordle.py",
                        "lineno": 166,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "mock_window = <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0370>\nset_target_word = <function set_target_word.<locals>._set_target_word at 0x7cc2df383370>\n\n    def test_game_over_condition(mock_window, set_target_word):\n        set_target_word('apple')\n        wordle()\n    \n        # Make six incorrect guesses\n        for _ in range(6):\n            mock_window.enter_listeners[0]('wrong'.upper())\n    \n    \n>       assert mock_window.get_current_row() == 5\nE       assert 0 == 5\nE        +  where 0 = <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0370>>()\nE        +    where <bound method MockWordleGWindow.get_current_row of <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0370>> = <test_wordle.MockWordleGWindow object at 0x7cc2dfbc0370>.get_current_row\n\ntest_wordle.py:166: AssertionError"
            },
            "teardown": {
                "duration": 8.712103590369225e-05,
                "outcome": "passed"
            }
        }
    ]
}
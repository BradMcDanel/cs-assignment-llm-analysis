{
    "created": 1716436008.19463,
    "duration": 0.09912538528442383,
    "exitcode": 1,
    "root": "/tmp/code_byt13mxi",
    "environment": {},
    "summary": {
        "passed": 2,
        "failed": 3,
        "total": 5,
        "collected": 5
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_SpellingBee.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py::test_puzzle_action",
                    "type": "Function",
                    "lineno": 44
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
                    "type": "Function",
                    "lineno": 57
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
                    "type": "Function",
                    "lineno": 68
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_action",
                    "type": "Function",
                    "lineno": 79
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_action",
                    "type": "Function",
                    "lineno": 93
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_SpellingBee.py::test_puzzle_action",
            "lineno": 44,
            "outcome": "passed",
            "keywords": [
                "test_puzzle_action",
                "test_SpellingBee.py",
                "code_byt13mxi"
            ],
            "setup": {
                "duration": 0.00016682897694408894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01115631905850023,
                "outcome": "passed",
                "stdout": "Starting test_puzzle_action\nBeehive letters: abcdefg\nMessages: [('Word not in dictionary.', 'Red')]\n"
            },
            "teardown": {
                "duration": 9.433599188923836e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
            "lineno": 57,
            "outcome": "failed",
            "keywords": [
                "test_invalid_puzzle_length",
                "test_SpellingBee.py",
                "code_byt13mxi"
            ],
            "setup": {
                "duration": 0.00011958298273384571,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010456717107445002,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_byt13mxi/test_SpellingBee.py",
                    "lineno": 67,
                    "message": "assert False\n +  where False = any(<generator object test_invalid_puzzle_length.<locals>.<genexpr> at 0x728e9d655cb0>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 67,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_invalid_puzzle_length\nMessages: [('Word not in dictionary.', 'Red')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x728e9d61ea10>\n\n    def test_invalid_puzzle_length(mock_graphics):\n        print(\"Starting test_invalid_puzzle_length\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcde\")\n        sbg.field_callback(\"abcde\")\n    \n        print(\"Messages:\", sbg.messages)\n>       assert any(\"Invalid puzzle\" in msg or \"Not in the dictionary.\" in msg for msg, _ in sbg.messages)\nE       assert False\nE        +  where False = any(<generator object test_invalid_puzzle_length.<locals>.<genexpr> at 0x728e9d655cb0>)\n\ntest_SpellingBee.py:67: AssertionError"
            },
            "teardown": {
                "duration": 0.000118482974357903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
            "lineno": 68,
            "outcome": "failed",
            "keywords": [
                "test_invalid_puzzle_duplicates",
                "test_SpellingBee.py",
                "code_byt13mxi"
            ],
            "setup": {
                "duration": 0.000117736984975636,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009385489043779671,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_byt13mxi/test_SpellingBee.py",
                    "lineno": 78,
                    "message": "assert False\n +  where False = any(<generator object test_invalid_puzzle_duplicates.<locals>.<genexpr> at 0x728e9c205930>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 78,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_invalid_puzzle_duplicates\nMessages: [('Word not in dictionary.', 'Red')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x728e9d7de2f0>\n\n    def test_invalid_puzzle_duplicates(mock_graphics):\n        print(\"Starting test_invalid_puzzle_duplicates\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcdeff\")\n        sbg.field_callback(\"abcdeff\")\n    \n        print(\"Messages:\", sbg.messages)\n>       assert any(\"Invalid puzzle\" in msg or \"Not in the dictionary.\" in msg for msg, _ in sbg.messages)\nE       assert False\nE        +  where False = any(<generator object test_invalid_puzzle_duplicates.<locals>.<genexpr> at 0x728e9c205930>)\n\ntest_SpellingBee.py:78: AssertionError"
            },
            "teardown": {
                "duration": 9.725603740662336e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_action",
            "lineno": 79,
            "outcome": "passed",
            "keywords": [
                "test_solve_action",
                "test_SpellingBee.py",
                "code_byt13mxi"
            ],
            "setup": {
                "duration": 0.00011788797564804554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02888569002971053,
                "outcome": "passed",
                "stdout": "Starting test_solve_action\nWords: [('abaca', 'Black'), ('abba', 'Black'), ('abbe', 'Black'), ('abed', 'Black'), ('accede', 'Black'), ('acceded', 'Black'), ('aced', 'Black'), ('adage', 'Black'), ('added', 'Black'), ('aged', 'Black'), ('agee', 'Black'), ('baaed', 'Black'), ('baba', 'Black'), ('babe', 'Black'), ('bacca', 'Black'), ('baccae', 'Black'), ('bade', 'Black'), ('badge', 'Black'), ('badged', 'Black'), ('baff', 'Black'), ('baffed', 'Black'), ('baggage', 'Black'), ('bagged', 'Black'), ('bead', 'Black'), ('beaded', 'Black'), ('cabbage', 'Black'), ('cabbaged', 'Black'), ('caca', 'Black'), ('cade', 'Black'), ('cadge', 'Black'), ('cadged', 'Black'), ('caeca', 'Black'), ('caecaeca', 'Black'), ('cafe', 'Black'), ('cage', 'Black'), ('caged', 'Black'), ('ceca', 'Black'), ('dabbed', 'Black'), ('dace', 'Black'), ('dada', 'Black'), ('daff', 'Black'), ('daffed', 'Black'), ('dagga', 'Black'), ('dead', 'Black'), ('deaf', 'Black'), ('decade', 'Black'), ('decaf', 'Black'), ('deface', 'Black'), ('defaced', 'Black'), ('degage', 'Black'), ('efface', 'Black'), ('effaced', 'Black'), ('egad', 'Black'), ('facade', 'Black'), ('face', 'Black'), ('faced', 'Black'), ('fade', 'Black'), ('faded', 'Black'), ('fadge', 'Black'), ('fadged', 'Black'), ('fagged', 'Black'), ('feedbag', 'Black'), ('gabbed', 'Black'), ('gadded', 'Black'), ('gaed', 'Black'), ('gaff', 'Black'), ('gaffe', 'Black'), ('gaffed', 'Black'), ('gaga', 'Black'), ('gage', 'Black'), ('gaged', 'Black'), ('gagged', 'Black')]\nMessages: [('Word not in dictionary.', 'Red'), ('Found 72 words with total score 286', 'Green')]\n"
            },
            "teardown": {
                "duration": 8.618005085736513e-05,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_action",
            "lineno": 93,
            "outcome": "failed",
            "keywords": [
                "test_word_action",
                "test_SpellingBee.py",
                "code_byt13mxi"
            ],
            "setup": {
                "duration": 0.00011780590284615755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010686562047339976,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_byt13mxi/test_SpellingBee.py",
                    "lineno": 107,
                    "message": "assert False\n +  where False = any(<generator object test_word_action.<locals>.<genexpr> at 0x728e9c205f50>)"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 107,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "Starting test_word_action\nWords: [('face', 'Black')]\nMessages: [('Word not in dictionary.', 'Red'), ('Word accepted with score 1.', 'Green')]\n",
                "longrepr": "mock_graphics = <test_SpellingBee.MockSpellingBeeGraphics object at 0x728e9de9fcd0>\n\n    def test_word_action(mock_graphics):\n        print(\"Starting test_word_action\")\n        sbg = mock_graphics\n        SpellingBee.spelling_bee()\n    \n        sbg.set_field(\"Puzzle\", \"abcdefg\")\n        sbg.field_callback(\"abcdefg\")\n        sbg.set_field(\"Word\", \"face\")\n        sbg.field_callback(\"face\")\n    \n        print(\"Words:\", sbg.words)\n        print(\"Messages:\", sbg.messages)\n        assert any(\"face\" in word for word, _ in sbg.words)  # Check that the word \"face\" is correctly added\n>       assert any(\"Found\" in msg for msg, _ in sbg.messages)  # Check that the message shows the number of words and total score\nE       assert False\nE        +  where False = any(<generator object test_word_action.<locals>.<genexpr> at 0x728e9c205f50>)\n\ntest_SpellingBee.py:107: AssertionError"
            },
            "teardown": {
                "duration": 0.00012172001879662275,
                "outcome": "passed"
            }
        }
    ]
}
{
    "created": 1731002244.056763,
    "duration": 0.25784921646118164,
    "exitcode": 1,
    "root": "/tmp/code_dox99vp_",
    "environment": {},
    "summary": {
        "error": 10,
        "total": 10,
        "collected": 10
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py",
                    "type": "Module"
                }
            ]
        },
        {
            "nodeid": "test_SpellingBee.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "test_SpellingBee.py::test_puzzle_initialization",
                    "type": "Function",
                    "lineno": 47
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
                    "type": "Function",
                    "lineno": 52
                },
                {
                    "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
                    "type": "Function",
                    "lineno": 57
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_action",
                    "type": "Function",
                    "lineno": 62
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_entry_valid",
                    "type": "Function",
                    "lineno": 69
                },
                {
                    "nodeid": "test_SpellingBee.py::test_word_entry_invalid",
                    "type": "Function",
                    "lineno": 77
                },
                {
                    "nodeid": "test_SpellingBee.py::test_pangram_identification",
                    "type": "Function",
                    "lineno": 84
                },
                {
                    "nodeid": "test_SpellingBee.py::test_score_calculation",
                    "type": "Function",
                    "lineno": 89
                },
                {
                    "nodeid": "test_SpellingBee.py::test_duplicate_word_entry",
                    "type": "Function",
                    "lineno": 96
                },
                {
                    "nodeid": "test_SpellingBee.py::test_solve_after_user_input",
                    "type": "Function",
                    "lineno": 104
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "test_SpellingBee.py::test_puzzle_initialization",
            "lineno": 47,
            "outcome": "error",
            "keywords": [
                "test_puzzle_initialization",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.015705409925431013,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef6767999c0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00012207799591124058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_length",
            "lineno": 52,
            "outcome": "error",
            "keywords": [
                "test_invalid_puzzle_length",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.017517246771603823,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef676fc07c0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00014512497000396252,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_invalid_puzzle_duplicates",
            "lineno": 57,
            "outcome": "error",
            "keywords": [
                "test_invalid_puzzle_duplicates",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.01682740985415876,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef6767799c0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00013895309530198574,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_action",
            "lineno": 62,
            "outcome": "error",
            "keywords": [
                "test_solve_action",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.016478082165122032,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef675b07610>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00011408701539039612,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_entry_valid",
            "lineno": 69,
            "outcome": "error",
            "keywords": [
                "test_word_entry_valid",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.01675249496474862,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef6767157e0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00013468903489410877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_word_entry_invalid",
            "lineno": 77,
            "outcome": "error",
            "keywords": [
                "test_word_entry_invalid",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.01582575705833733,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef6768dc1f0>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00013871700502932072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_pangram_identification",
            "lineno": 84,
            "outcome": "error",
            "keywords": [
                "test_pangram_identification",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.016177301062271,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef676715e40>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00013344199396669865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_score_calculation",
            "lineno": 89,
            "outcome": "error",
            "keywords": [
                "test_score_calculation",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.01618220191448927,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef676f2b430>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.0001222060527652502,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_duplicate_word_entry",
            "lineno": 96,
            "outcome": "error",
            "keywords": [
                "test_duplicate_word_entry",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.016111921053379774,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef676fc0970>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.00011762394569814205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "test_SpellingBee.py::test_solve_after_user_input",
            "lineno": 104,
            "outcome": "error",
            "keywords": [
                "test_solve_after_user_input",
                "test_SpellingBee.py",
                "code_dox99vp_"
            ],
            "setup": {
                "duration": 0.015864906832575798,
                "outcome": "failed",
                "crash": {
                    "path": "/tmp/code_dox99vp_/SpellingBee.py",
                    "lineno": 98,
                    "message": "TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given"
                },
                "traceback": [
                    {
                        "path": "test_SpellingBee.py",
                        "lineno": 45,
                        "message": ""
                    },
                    {
                        "path": "SpellingBee.py",
                        "lineno": 98,
                        "message": "TypeError"
                    }
                ],
                "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ef6768de590>\n\n    @pytest.fixture\n    def mock_graphics(monkeypatch):\n        mock = MockSpellingBeeGraphics()\n        monkeypatch.setattr(SpellingBee, 'SpellingBeeGraphics', lambda: mock)\n>       SpellingBee.spelling_bee()\n\ntest_SpellingBee.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def spelling_bee():\n        def read_dictionary():\n            with open(DICTIONARY_FILE, 'r') as file:\n                return set(word.strip().lower() for word in file)\n    \n        def is_valid_puzzle(puzzle):\n            return (len(puzzle) == 7 and\n                    puzzle.isalpha() and\n                    len(set(puzzle)) == 7)\n    \n        def is_valid_word(word, puzzle):\n            center = puzzle[0].lower()\n            puzzle_set = set(puzzle.lower())\n            return (len(word) >= 4 and\n                    set(word).issubset(puzzle_set) and\n                    center in word)\n    \n        def calculate_score(word, puzzle):\n            score = len(word)\n            if score == 4:\n                score = 1\n            if set(word) == set(puzzle.lower()):\n                score += 7  # Pangram bonus\n            return score\n    \n        def find_words(puzzle):\n            valid_words = []\n            for word in dictionary:\n                if is_valid_word(word, puzzle):\n                    valid_words.append(word)\n            return valid_words\n    \n        def update_score_display(total_words, total_score):\n            sbg.show_message(f\"Words: {total_words}, Score: {total_score}\")\n    \n        def puzzle_action(s):\n            if is_valid_puzzle(s):\n                sbg.set_beehive_letters(s.upper())\n                sbg.show_message(\"Puzzle set successfully!\")\n            else:\n                sbg.show_message(\"Invalid puzzle. Please enter 7 unique letters.\", \"Red\")\n    \n        def solve_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            sbg.clear_word_list()\n            valid_words = find_words(puzzle)\n            total_score = 0\n            for word in valid_words:\n                score = calculate_score(word, puzzle)\n                total_score += score\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n    \n            update_score_display(len(valid_words), total_score)\n    \n        def word_action(s):\n            puzzle = sbg.get_beehive_letters()\n            if not puzzle:\n                sbg.show_message(\"Please set a valid puzzle first.\", \"Red\")\n                return\n    \n            word = s.lower()\n            if word not in dictionary:\n                sbg.show_message(\"Word not in dictionary.\", \"Red\")\n            elif not is_valid_word(word, puzzle):\n                if len(word) < 4:\n                    sbg.show_message(\"Word must be at least 4 letters long.\", \"Red\")\n                elif puzzle[0].lower() not in word:\n                    sbg.show_message(\"Word must contain the center letter.\", \"Red\")\n                else:\n                    sbg.show_message(\"Word contains invalid letters.\", \"Red\")\n            elif word in found_words:\n                sbg.show_message(\"Word already found.\", \"Red\")\n            else:\n                score = calculate_score(word, puzzle)\n                color = \"Blue\" if set(word) == set(puzzle.lower()) else \"Black\"\n                sbg.add_word(f\"{word} ({score})\", color)\n                found_words.add(word)\n                total_words = len(found_words)\n                total_score = sum(calculate_score(w, puzzle) for w in found_words)\n                update_score_display(total_words, total_score)\n                sbg.set_field(\"Word\", \"\")  # Clear the word field\n    \n        global dictionary, found_words\n        dictionary = read_dictionary()\n        found_words = set()\n    \n        sbg = SpellingBeeGraphics()\n>       sbg.add_field(\"Puzzle\", puzzle_action, 7)\nE       TypeError: MockSpellingBeeGraphics.add_field() takes 3 positional arguments but 4 were given\n\nSpellingBee.py:98: TypeError"
            },
            "teardown": {
                "duration": 0.0001345889177173376,
                "outcome": "passed"
            }
        }
    ]
}
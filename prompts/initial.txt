Assignment to solve:
<|assignment|>

Instructions:
- Your response should consist of python codeblocks.
- The first line of each codeblock should be a comment with the filename.
- If starter code is provided, you must re-write a complete version of each file in your response.
  - A computer program will extract each codeblock into its own file and then run the main entry point.
- You must write an additional test program(s) using `unittest` that starts with "test_" to test the code.
  - It should properly mock any input/output in the main entrypoint (if any).
  - These test programs will be evaluated to ensure your code works as expected.
- Make sure all filenames and class names are consistent with the assignment description.
- Before writing code, think step-by-step what you want to do and write the steps as comments.

Example Response:
To solve this problem, I will ...

1. ...
2. ...

```python
# main.py
import mymath

if __name__ == "__main__":
    a = int(input("Enter a number: "))
    b = int(input("Enter another number: "))
    print(mymath.add(a, b))
```

```python
# mymath.py
def add(a, b):
    return a + b
```

```python
# test_main.py

import unittest
from unittest import mock
import mymath
import main

class TestMain(unittest.TestCase):
    @mock.patch('builtins.input', side_effect=['2', '3'])
    @mock.patch('builtins.print')
    def test_main(self, mock_print, mock_input):
        main.main()
        mock_print.assert_called_once_with(5)

    @mock.patch('builtins.input', side_effect=['10', '20'])
    @mock.patch('builtins.print')
    def test_main_large_numbers(self, mock_print, mock_input):
        main.main()
        mock_print.assert_called_once_with(30)

if __name__ == '__main__':
    unittest.main()
```

